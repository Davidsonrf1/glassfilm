using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.Data.SQLite;
using System.Data;
using System.Data.Common;
using VectorView;
using System.Reflection;
using System.Drawing;
using System.IO;

namespace GlassFilm.Class
{
    public enum TipoDesenho
    {
        WindowTint, PPV, None
    }

    public static class DBManager
    {        
        public static SQLiteConnection _mainConnection = null;
        public static SQLiteConnection _modelConnection = null;
        public static SQLiteConnection _accessConnection = null;
        public static string _mainDbName = string.Format("Data Source={0};Version=3", "GlassFilm.db");
        public static string _modelDbname = string.Format("Data Source={0};Version=3", "Modelos.db");
        public static string _accessDbname = string.Format("Data Source={0};Version=3", "Access.db");

        public static void InitDB()
        {
            _mainConnection = new SQLiteConnection(_mainDbName);
            _mainConnection.Open();

            _modelConnection = new SQLiteConnection(_modelDbname);
            _modelConnection.Open();

            _accessConnection = new SQLiteConnection(_accessDbname);
            _accessConnection.Open();
        }

        public static bool conectado()
        {
            return _mainConnection != null && _mainConnection.State == ConnectionState.Open;
        }

        public static int Count(string tableName)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            cmd.CommandText = string.Format("SELECT COUNT(*) FROM {0}", tableName);
            int count = Convert.ToInt32(cmd.ExecuteScalar().ToString());

            return count;
        }

        public static bool ColExiste(string tb, string col, SQLiteConnection con)
        {
            SQLiteCommand cmd = con.CreateCommand();
            
            cmd.CommandText = string.Format("PRAGMA table_info({0})", tb);

            IDataReader dr = cmd.ExecuteReader();

            while(dr.Read())
            {
                if (dr["name"].ToString().Equals(col, StringComparison.InvariantCultureIgnoreCase))
                {
                    dr.Close();
                    return true;
                }
            }

            dr.Close();

            return false;
        }

        public static void GravaLogCorte(VectorDocument doc)
        {
            doc.CalcMetrics();

            foreach (VectorPath p in doc.Paths)
                GravaLogCorte("Usuário", (int)doc.DocHeight, (int)doc.DocWidth, (int)doc.UsedArea, p.Marca, p.Modelo, p.Ano, p.NomePeca);
        }

        public static void GravaLogCorte(VectorDocument doc, string marca, string modelo, string ano, string nomePeca)
        {
            doc.CalcMetrics();
            GravaLogCorte("Usuário", (int)doc.DocHeight, (int)doc.DocWidth, (int)doc.UsedArea, marca, modelo, ano, nomePeca);
        }

        public static void CheckLogTable()
        {
            SQLiteCommand cmd = _accessConnection.CreateCommand();

            if (!ColExiste("LOG_CORTE", "MARCA", _accessConnection))
            {
                cmd.CommandText = "alter table log_corte add marca text";
                cmd.ExecuteNonQuery();
            }

            if (!ColExiste("LOG_CORTE", "MODELO", _accessConnection))
            {
                cmd.CommandText = "alter table log_corte add modelo text";
                cmd.ExecuteNonQuery();
            }

            if (!ColExiste("LOG_CORTE", "ANO", _accessConnection))
            {
                cmd.CommandText = "alter table log_corte add ano text";
                cmd.ExecuteNonQuery();
            }

            if (!ColExiste("LOG_CORTE", "NOMEPECA", _accessConnection))
            {
                cmd.CommandText = "alter table log_corte add nomePeca text";
                cmd.ExecuteNonQuery();
            }
        }

        public static void GravaLogCorte(string usuario, int largura_rolo, int altura_rolo, int area_total, string marca, string modelo, string ano, string nomePeca)
        {
            CheckLogTable();

            try
            {
                SQLiteCommand cmd = _accessConnection.CreateCommand();

                int area_rolo = largura_rolo * altura_rolo;
                int eficiencia = area_rolo > 0 ? area_total / area_total : 100;

                SQLiteParameter p;

                cmd.CommandText = "INSERT INTO LOG_CORTE(USUARIO, LARGURA_ROLO_USADO, ALTURA_ROLO_USADO, AREA_ROLO_USADO, AREA_TOTAL_PECAS, EFICIENCIA, DATA, HORA, MARCA, MODELO, ANO, NOMEPECA) VALUES(@USUARIO, @LARGURA_ROLO_USADO, @ALTURA_ROLO_USADO, @AREA_ROLO_USADO, @AREA_TOTAL_PECAS, @EFICIENCIA, @DATA, @HORA, @MARCA, @MODELO, @ANO, @NOMEPECA)";

                p = new SQLiteParameter("USUARIO", DbType.String);
                p.Value = Glass.usuario != null ? Glass.usuario.nome : "Usuário";
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("LARGURA_ROLO_USADO", DbType.Int32);
                p.Value = largura_rolo;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("ALTURA_ROLO_USADO", DbType.Int32);
                p.Value = altura_rolo;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("AREA_ROLO_USADO", DbType.Int32);
                p.Value = area_rolo;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("AREA_TOTAL_PECAS", DbType.Int32);
                p.Value = area_total;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("EFICIENCIA", DbType.Int32);
                p.Value = eficiencia;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("DATA", DbType.String);
                p.Value = DateTime.Now.ToShortDateString();
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("HORA", DbType.String);
                p.Value = DateTime.Now.ToShortTimeString();
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("MARCA", DbType.String);
                p.Value = marca;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("MODELO", DbType.String);
                p.Value = modelo;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("ANO", DbType.String);
                p.Value = ano;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("NOMEPECA", DbType.String);
                p.Value = nomePeca;
                cmd.Parameters.Add(p);

                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                Logs.Log("GravaLogCorte(): " + ex.Message);
            }

        }

        public static DbType GetDbType(string type)
        {
            if (type.StartsWith("int", StringComparison.InvariantCultureIgnoreCase) ||
                type.StartsWith("uint", StringComparison.InvariantCultureIgnoreCase)) 
            {
                return DbType.Int32;
            }

            if (type.StartsWith("blob", StringComparison.InvariantCultureIgnoreCase))
            {
                return DbType.Binary;
            }

            return DbType.String;
        }

        public static Dictionary<string, string> GetTableInfo(string tb, SQLiteConnection con)
        {
            SQLiteCommand cmd = con.CreateCommand();

            cmd.CommandText = string.Format("PRAGMA table_info({0})", tb);

            IDataReader dr = cmd.ExecuteReader();

            Dictionary<string, string> ret = new Dictionary<string, string>(StringComparer.InvariantCultureIgnoreCase);

            while (dr.Read())
            {
                ret.Add(dr["name"].ToString(), dr["type"].ToString());
            }

            dr.Close();

            return ret;
        }

        public static DataTable LoadDataTable(string cmdText, SQLiteConnection con)
        {
            SQLiteCommand cmd = con.CreateCommand();

            cmd.CommandText = string.Format(cmdText);
            DataTable dt = new DataTable();

            IDataReader dr = cmd.ExecuteReader();
            dt.Load(dr);
            dr.Close();

            return dt;
        }

        public static List<ConfigValue> CarregaConfig()
        {
            List<ConfigValue> cfg = new List<ConfigValue>();

            SQLiteCommand cmd = _mainConnection.CreateCommand();

            cmd.CommandText = "SELECT * FROM PARAMETROS ORDER BY NOME";
            IDataReader dr = cmd.ExecuteReader();

            while (dr.Read())
            {
                ConfigValue c = new ConfigValue(Convert.ToInt32(dr["ID"].ToString()), dr["NOME"].ToString(), dr["VALOR_PADRAO"].ToString());
                c.Valor = dr["VALOR"].ToString();
                cfg.Add(c);
            }

            dr.Close();
            return cfg;
        }

        public static void GravaConfig(List<ConfigValue> cfg)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            cmd.CommandText = "DELETE FROM PARAMETROS";
            cmd.ExecuteNonQuery();

            foreach (ConfigValue c in cfg)
            {
                SQLiteParameter p; 

                cmd.CommandText = "INSERT INTO PARAMETROS(NOME, VALOR_PADRAO, VALOR) VALUES(@NOME, @VALOR_PADRAO, @VALOR)";

                p = new SQLiteParameter("NOME", DbType.String);
                p.Value = c.Nome;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("VALOR_PADRAO", DbType.String);
                p.Value = c.ValorPadrao;
                cmd.Parameters.Add(p);

                p = new SQLiteParameter("VALOR", DbType.String);
                p.Value = c.Valor;
                cmd.Parameters.Add(p);

                cmd.ExecuteNonQuery();
            }
        }

        public static void VerificaTabelasAuxiliares()
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            cmd.CommandText = "SELECT COUNT(*) FROM ELIMINA_REGISTRO";
            try
            {
                cmd.ExecuteScalar();
            }
            catch
            {
                cmd.CommandText = "CREATE TABLE ELIMINA_REGISTRO (ID INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT UNIQUE, TABELA	TEXT NOT NULL, CODIGO INTEGER NOT NULL, ELIMINADA INTEGER DEFAULT 0)";
                cmd.ExecuteNonQuery();
            }

            try
            {
                if (!ColExiste("DESENHOS", "VISUALIZADO", _modelConnection))
                {
                    cmd = _modelConnection.CreateCommand();

                    cmd.CommandText = "ALTER TABLE DESENHOS ADD VISUALIZADO INT";
                    cmd.ExecuteNonQuery();

                    cmd.CommandText = "UPDATE DESENHOS SET VISUALIZADO = 1";
                    cmd.ExecuteNonQuery();
                }
            }
            catch
            {

            }

            try
            {
                if (!ColExiste("DESENHOS", "FOTO", _modelConnection))
                {
                    cmd = _modelConnection.CreateCommand();

                    cmd.CommandText = "ALTER TABLE DESENHOS ADD FOTO BLOB";
                    cmd.ExecuteNonQuery();
                }
            }
            catch
            {

            }

            try
            {
                if (!ColExiste("DESENHOS", "OBS", _modelConnection))
                {
                    cmd = _modelConnection.CreateCommand();

                    cmd.CommandText = "ALTER TABLE DESENHOS ADD OBS BLOB";
                    cmd.ExecuteNonQuery();
                }
            }
            catch
            {

            }

            try
            {
                cmd = _modelConnection.CreateCommand();

                AddIfNotExists("DESENHOS", "TIPO_DESENHO", "INT NULL DEFAULT 0", cmd);
                AddIfNotExists("DESENHOS", "DESENHO_PPV", "DESENHO_PPV BLOB NULL", cmd);
                AddIfNotExists("DESENHOS", "TAMANHO_DESENHO_PPV", "INT NULL DEFAULT 0", cmd);

                cmd = _mainConnection.CreateCommand();

                AddIfNotExists("MODELO_ANO", "VERSAO_MODELO", "INT NULL DEFAULT 0", cmd);
                AddIfNotExists("MODELO_ANO", "POSSUI_PPV", "INT NULL DEFAULT 0", cmd);
                AddIfNotExists("MODELO", "POSSUI_PPV", "INT NULL DEFAULT 0", cmd);
                AddIfNotExists("MARCA", "POSSUI_PPV", "INT NULL DEFAULT 0", cmd);

                cmd = _accessConnection.CreateCommand();
                AddIfNotExists("EMPRESA", "VERSAO_ATUAL_DESENHOS", "INT NULL DEFAULT 0", cmd);
            }
            catch
            {
                
            }
        }

        public static void EliminaRegistro(string tabela, string codigo)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            if (tabela != null && codigo != null)
            {
                cmd.CommandText = string.Format("INSERT INTO ELIMINA_REGISTRO (TABELA, CODIGO, SINCRONIZAR) VALUES ('{0}', {1}, 1)", tabela, codigo);
                cmd.ExecuteNonQuery();
            }
        }

        public static List<Filme> CarregarRolos()
        {
            List<Filme> rolos = new List<Class.Filme>();

            SQLiteCommand cmd = _mainConnection.CreateCommand();

            cmd.CommandText = "SELECT * FROM ROLO ORDER BY LARGURA";
            IDataReader dr = cmd.ExecuteReader();

            while (dr.Read())
                rolos.Add(new Filme(Convert.ToInt32(dr["ID"].ToString()), Convert.ToInt32(dr["LARGURA"].ToString()), dr["DESCRICAO"].ToString()));

            dr.Close();
            return rolos;
        }

        public static List<Marca> CarregarMarcas(bool todas, TipoDesenho tipoDesenho)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            string filtro = "WHERE 1=1 ";

            if (!todas)
            {
                switch (tipoDesenho)
                {
                    case TipoDesenho.WindowTint:
                        filtro += " AND POSSUI_DESENHO = 1 ";
                        break;
                    case TipoDesenho.PPV:
                        filtro += " AND POSSUI_PPV = 1 ";
                        break;
                }
            }

            cmd.CommandText = $"SELECT * FROM MARCA {filtro} AND (SELECT CODIGO_MODELO FROM MODELO WHERE CODIGO_MARCA = MARCA.CODIGO_MARCA)>0 ORDER BY MARCA";
            IDataReader dr = cmd.ExecuteReader();

            List<Marca> marcas = new List<Marca>();

            while (dr.Read())
                marcas.Add(new Marca(Convert.ToInt32(dr["CODIGO_MARCA"].ToString()), dr["MARCA"].ToString()));

            dr.Close();
            return marcas;
        }

        public static List<Modelo> CarregarModelos(int marca, bool todos, TipoDesenho tipoDesenho)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            string filtro = "WHERE CODIGO_MARCA = " + marca.ToString();

            if (!todos)
            {
                switch (tipoDesenho)
                {
                    case TipoDesenho.WindowTint:
                        filtro += " AND POSSUI_DESENHO = 1 ";
                        break;
                    case TipoDesenho.PPV:
                        filtro += " AND POSSUI_PPV = 1 ";
                        break;
                }
            }

            cmd.CommandText = $"SELECT * FROM MODELO {filtro} ORDER BY MODELO";
            IDataReader dr = cmd.ExecuteReader();

            List<Modelo> modelos = new List<Class.Modelo>();

            while (dr.Read())
                modelos.Add(new Modelo(Convert.ToInt32(dr["CODIGO_MODELO"].ToString()), dr["MODELO"].ToString()));

            dr.Close();
            return modelos;
        }

        public static List<Veiculo> CarregarVeiculos(int modelo, bool todos, TipoDesenho tipoDesenho)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            string filtro = "WHERE CODIGO_MODELO = " + modelo;

            if (!todos)
            {
                switch (tipoDesenho)
                {
                    case TipoDesenho.WindowTint:
                        filtro += " AND POSSUI_DESENHO = 1 ";
                        break;
                    case TipoDesenho.PPV:
                        filtro += " AND POSSUI_PPV = 1 ";
                        break;
                }
            }

            cmd.CommandText = $"SELECT * FROM VEICULO {filtro} ORDER BY ANO";
            IDataReader dr = cmd.ExecuteReader();

            List<Veiculo> veiculos = new List<Class.Veiculo>();

            while (dr.Read())
                veiculos.Add(new Veiculo(Convert.ToInt32(dr["VEICULO"].ToString()), dr["ANO"].ToString()));

            dr.Close();
            return veiculos;
        }

        public static List<ModeloAno> CarregaModeloANO(int modelo, bool todos, TipoDesenho tipoDesenho)
        {
            SQLiteCommand cmd = _mainConnection.CreateCommand();

            string filtro = "WHERE CODIGO_MODELO = " + modelo;

            if (!todos)
            {
                switch (tipoDesenho)
                {
                    case TipoDesenho.WindowTint:
                        filtro += " AND POSSUI_DESENHO = 1 ";
                        break;
                    case TipoDesenho.PPV:
                        filtro += " AND POSSUI_PPV = 1 ";
                        break;
                }
            }

            cmd.CommandText = $"SELECT * FROM MODELO_ANO {filtro} ORDER BY ANO ASC";
            IDataReader dr = cmd.ExecuteReader();

            List<ModeloAno> lma = new List<ModeloAno>();

            while (dr.Read())
            {
                lma.Add(new ModeloAno(dr["CODIGO_ANO"].ToString(),dr["CODIGO_MODELO"].ToString(), dr["ANO"].ToString()));
            }

            dr.Close();
            return lma;
        }

        public static string CarregarObs(int veiculo)
        {
            SQLiteCommand cmd = _modelConnection.CreateCommand();

            cmd.CommandText = "SELECT OBS FROM DESENHOS WHERE VEICULO = " + veiculo.ToString();
            IDataReader dr = cmd.ExecuteReader();

            if (dr.Read())
            {
                try
                {
                    int col = dr.GetOrdinal("OBS");

                    if (dr.IsDBNull(dr.GetOrdinal("OBS")))
                    {
                        return "";
                    }

                    MemoryStream ms = new MemoryStream(8040);

                    byte[] buffer = new byte[8040];
                    long offset = 0;
                    int read;
                    while ((read = (int)dr.GetBytes(col, offset, buffer, 0, buffer.Length)) > 0)
                    {
                        offset += read;
                        ms.Write(buffer, 0, read);
                    }

                    ms.Position = 0;

                    StreamReader sr = new StreamReader(ms);
                    string obs = sr.ReadToEnd();

                    sr.Close();
                    ms.Close();

                    return obs;
                }
                catch (Exception ex)
                {
                    Console.Write(ex.Message);
                }
                finally
                {
                    dr.Close();
                }

                return null;
            }

            return null;
        }

        public static Image CarregarFoto(int veiculo, out byte[] imageData)
        {
            VerificaTabelasAuxiliares();

            SQLiteCommand cmd = _modelConnection.CreateCommand();

            cmd.CommandText = "SELECT FOTO FROM DESENHOS WHERE VEICULO = " + veiculo.ToString();
            IDataReader dr = cmd.ExecuteReader();

            imageData = null;

            if (dr.Read())
            {
                try
                {
                    int col = dr.GetOrdinal("FOTO");

                    if (dr.IsDBNull(dr.GetOrdinal("FOTO")))
                    {
                        return null;
                    }

                    MemoryStream ms = new MemoryStream(8040);

                    byte[] buffer = new byte[8040];
                    long offset = 0;
                    int read;
                    while ((read = (int)dr.GetBytes(col, offset, buffer, 0, buffer.Length)) > 0)
                    {
                        offset += read;
                        ms.Write(buffer, 0, read);
                    }

                    ms.Flush();

                    imageData = new byte[ms.Length];
                    ms.Seek(0, SeekOrigin.Begin);
                    ms.Read(imageData, 0, imageData.Length);

                    ms.Seek(0, SeekOrigin.Begin);

                    Image img = Image.FromStream(ms);

                    return img;
                }
                catch (Exception ex)
                {
                    Console.Write(ex.Message);
                }
                finally
                {
                    dr.Close();
                }
                                
                return null;
            }

            return null;
        }

        public static string CarregarDesenho(int veiculo, out int codigo_desenho, TipoDesenho tipo)
        {
            codigo_desenho = -1;

            SQLiteCommand cmd = _modelConnection.CreateCommand();

            cmd.CommandText = "SELECT * FROM DESENHOS WHERE VEICULO = " + veiculo.ToString();
            IDataReader dr = cmd.ExecuteReader();

            if (dr.Read())
            {
                int ord = 0;
                byte[] buffer;
                string desenho = null;
                int len = 0;

                if (tipo == TipoDesenho.WindowTint)
                {
                    ord = dr.GetOrdinal("DESENHO");
                }

                if (tipo == TipoDesenho.PPV)
                {
                    ord = dr.GetOrdinal("DESENHO_PPV");
                }

                if (!dr.IsDBNull(ord))
                {
                    if(tipo == TipoDesenho.WindowTint)
                        len = Convert.ToInt32(dr["TAMANHO"].ToString());
                    else
                        len = Convert.ToInt32(dr["TAMANHO_DESENHO_PPV"].ToString());

                    try
                    {
                        buffer = new byte[len];
                        dr.GetBytes(ord, 0, buffer, 0, len);
                        desenho = Encoding.UTF8.GetString(buffer);
                    }
                    catch
                    {
                        desenho = "";
                    }
                }

                try
                {
                    if (dr.GetOrdinal("DESENHOC") >= 0)
                    {
                        if (dr["DESENHOC"].ToString().Equals("S"))
                        {
                            desenho = desenho != null ? Bolacha(desenho): null;
                        }
                    }
                }
                catch(Exception ex)
                {
                    Console.Write(ex.Message);
                }

                dr.Close();
                return desenho;
            }            

            return null;
        }

        public static string GetNumDesenhos()
        {
            int num = 0;

            try
            {
                SQLiteCommand cmd = _modelConnection.CreateCommand();
                cmd.CommandText = "select count(*) from desenhos";
                num = int.Parse(cmd.ExecuteScalar().ToString());
            }
            catch {}

            return num.ToString();
        }

        public static string GetNumVeiculoMarca()
        {
            int numModelo = 0;
            int numMarca = 0;

            try
            {
                SQLiteCommand cmd = _mainConnection.CreateCommand();
                cmd.CommandText = "select count(*) from modelo";
                numModelo = int.Parse(cmd.ExecuteScalar().ToString());
            }
            catch { }

            try
            {
                SQLiteCommand cmd = _mainConnection.CreateCommand();
                cmd.CommandText = "select count(*) from marca";
                numMarca = int.Parse(cmd.ExecuteScalar().ToString());
            }
            catch { }

            return string.Format("{0} Veículos de {1} Marcas", numModelo.ToString(), numMarca.ToString());
        }

        public static void SalvaImagem(int codigoModelo, byte[] img)
        {
            /*
            SQLiteCommand cmd = _modelConnection.CreateCommand();

            try
            {
                cmd.CommandText = "UPDATE MODELO INTO DESENHOS (VEICULO, VERSAO, DESENHO, TAMANHO, SINCRONIZAR, VISUALIZADO) VALUES (@veic,@versao,@dados,@tamanho, 1, 0)";
                cmd.Parameters.Add("@veic", DbType.Int32).Value = codigo_ano;
                cmd.Parameters.Add("@versao", DbType.Int32).Value = versao;
                cmd.Parameters.Add("@dados", DbType.Binary, svgData.Length).Value = svgData;
                cmd.Parameters.Add("@tamanho", DbType.Int32).Value = svgData.Length;

                cmd.ExecuteNonQuery();

                if (ehBiscoito)
                {
                    cmd.CommandText = "UPDATE DESENHOS SET DESENHOC = 'S' WHERE VEICULO = " + codigo_ano.ToString();
                    cmd.ExecuteNonQuery();
                }
            }
            catch
            {
                tr.Rollback();
                throw;
            }
            */
        }

        public static void RemoverDesenho(int codigo_ano)
        {
            SQLiteCommand cmd = _modelConnection.CreateCommand();
            SQLiteTransaction tr = _modelConnection.BeginTransaction();

            try
            {
                cmd.CommandText = "DELETE FROM DESENHOS WHERE VEICULO = " + codigo_ano.ToString();
                cmd.ExecuteNonQuery();
            }
            catch
            {
                tr.Rollback();
                throw;
            }

            tr.Commit();

            cmd = _mainConnection.CreateCommand();

            // Window tint
            cmd.CommandText = "UPDATE MODELO_ANO SET POSSUI_DESENHO = 0 WHERE CODIGO_ANO = " + codigo_ano.ToString();
            cmd.ExecuteNonQuery();

            cmd.CommandText = "UPDATE MODELO SET POSSUI_DESENHO = 0";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "UPDATE MODELO SET POSSUI_DESENHO = 1 WHERE CODIGO_MODELO IN (SELECT CODIGO_MODELO FROM MODELO_ANO WHERE POSSUI_DESENHO = 1)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "UPDATE MARCA SET POSSUI_DESENHO = 0";
            cmd.ExecuteNonQuery();

            cmd.CommandText = "UPDATE MARCA SET POSSUI_DESENHO = 1 WHERE CODIGO_MARCA IN (SELECT CODIGO_MARCA FROM MODELO WHERE POSSUI_DESENHO = 1)";
            cmd.ExecuteNonQuery();
            
            // PPV
            cmd.CommandText = $"UPDATE MODELO_ANO SET POSSUI_PPV = 0 WHERE CODIGO_ANO = {codigo_ano}";
            cmd.ExecuteNonQuery();

            cmd.CommandText = $"UPDATE MODELO SET POSSUI_PPV = 0";
            cmd.ExecuteNonQuery();

            cmd.CommandText = $"UPDATE MODELO SET POSSUI_PPV = 1 WHERE CODIGO_MODELO IN (SELECT CODIGO_MODELO FROM MODELO_ANO WHERE POSSUI_PPV = 1)";
            cmd.ExecuteNonQuery();

            cmd.CommandText = $"UPDATE MARCA SET POSSUI_PPV = 0 ";
            cmd.ExecuteNonQuery();

            cmd.CommandText = $"UPDATE MARCA SET POSSUI_PPV = 1 WHERE CODIGO_MARCA IN (SELECT CODIGO_MARCA FROM MODELO WHERE POSSUI_PPV = 1)";
            cmd.ExecuteNonQuery();
        }

        public static object SvgData(string svg, out int len)
        {
            len = 0;

            if (svg != null)
            {
                byte[] data = Encoding.UTF8.GetBytes(svg);
                len = data.Length;
                return data;
            }

            return DBNull.Value;
        }

        public static void AddIfNotExists(string table, string column, string colDef, SQLiteCommand cmd)
        {
            if (!ColExiste(table, column, cmd.Connection))
            {
                cmd.CommandText = $"ALTER TABLE {table} ADD {column} {colDef}";

                try
                {
                    cmd.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    Logs.Log("Erro AddIfNotExists ->" + table);
                }                
            }
        }

        public static void AddIfNotExists(string table, string column, string cmdStr, SQLiteConnection con)
        {
            SQLiteCommand c = con.CreateCommand();
            AddIfNotExists(table, column, cmdStr, c);
        }

        public static void RemoverAno(int codigo_ano)
        {

        }

        public static void SalvarDesenho(int codigo_ano, string svg, string obs, TipoDesenho tipo, byte[] imageData = null)
        {
            bool ehBiscoito = false;
            if (ColExiste("DESENHOS", "DESENHOC", _modelConnection))
            {
                if(svg != null)
                    svg = Biscoito(svg);

                ehBiscoito = true;
            }

            SQLiteCommand cmd = null;

            cmd = _mainConnection.CreateCommand();

            int versaoModelo = 0;
            cmd.CommandText = "SELECT IFNULL(MAX(VERSAO_MODELO), 0) VERSAO FROM MODELO_ANO";
            versaoModelo = Convert.ToInt32(cmd.ExecuteScalar().ToString()) + 1;

            //cmd.CommandText = $"UPDATE MODELO_ANO SET VERSAO_MODELO = {versaoModelo}";
            //cmd.ExecuteNonQuery();

            object svgData = null;

            int versao = 0;

            cmd = _modelConnection.CreateCommand();
            SQLiteTransaction tr = _modelConnection.BeginTransaction();

            try
            {
                int len = 0;

                cmd.CommandText = "SELECT IFNULL(MAX(VERSAO), 0) VERSAO FROM DESENHOS";
                versao = Convert.ToInt32(cmd.ExecuteScalar().ToString()) + 1;

                if (svg == null)
                {
                    cmd.CommandText = "DELETE FROM DESENHOS WHERE VEICULO = " + codigo_ano.ToString();
                    cmd.ExecuteNonQuery();
                }
                else
                {
                    cmd.CommandText = $"select count(*) from DESENHOS where veiculo = {codigo_ano}";
                    int count = 0;

                    try
                    {
                        count = Convert.ToInt32(cmd.ExecuteScalar());
                    }
                    catch
                    {
                        count = 0;
                    }

                    string colDesenho = "";
                    string colTamanho = "";
                    switch (tipo)
                    {
                        case TipoDesenho.WindowTint:
                            colDesenho = "DESENHO";
                            colTamanho = "TAMANHO";
                            break;
                        case TipoDesenho.PPV:
                            colDesenho = "DESENHO_PPV";
                            colTamanho = "TAMANHO_DESENHO_PPV";
                            break;
                    }

                    if (count > 0)
                    {
                        cmd.CommandText = $"UPDATE DESENHOS SET VEICULO=@veic, VERSAO=@versao, {colDesenho}=@dados, {colTamanho} = @tamanho, SINCRONIZAR=1, VISUALIZADO=0, FOTO=@foto, OBS=@obs, TIPO_DESENHO=@TIPO_DESENHO WHERE VEICULO = {codigo_ano}";
                    }
                    else
                    {
                        if (tipo == TipoDesenho.PPV)
                            cmd.CommandText = $"INSERT INTO DESENHOS (VEICULO, VERSAO, DESENHO, TAMANHO, {colDesenho}, {colTamanho}, SINCRONIZAR, VISUALIZADO, FOTO, OBS, TIPO_DESENHO) VALUES (@veic,@versao,' ', 0, @dados,@tamanho, 1, 0, @foto, @obs, @TIPO_DESENHO)";
                        else
                            cmd.CommandText = $"INSERT INTO DESENHOS (VEICULO, VERSAO, {colDesenho}, {colTamanho}, SINCRONIZAR, VISUALIZADO, FOTO, OBS, TIPO_DESENHO) VALUES (@veic,@versao,@dados,@tamanho, 1, 0, @foto, @obs, @TIPO_DESENHO)";
                    }

                    cmd.Parameters.Add("@veic", DbType.Int32).Value = codigo_ano;
                    cmd.Parameters.Add("@versao", DbType.Int32).Value = versao;

                    svgData = SvgData(svg, out len);
                    cmd.Parameters.Add("@dados", DbType.Binary, len).Value = svgData;
                    cmd.Parameters.Add("@tamanho", DbType.Int32).Value = len;

                    cmd.Parameters.Add("@TIPO_DESENHO", DbType.Int32).Value = 0;

                    if (imageData != null)
                        cmd.Parameters.Add("@foto", DbType.Binary, imageData.Length).Value = imageData;
                    else
                        cmd.Parameters.Add("@foto", DbType.Binary, 0).Value = DBNull.Value;

                    if (obs != null)
                    {
                        byte[] obsData = Encoding.UTF8.GetBytes(obs);
                        cmd.Parameters.Add("@obs", DbType.Binary, obsData.Length).Value = obsData;
                    }
                    else
                    {
                        cmd.Parameters.Add("@obs", DbType.Binary, 0).Value = DBNull.Value;
                    }

                    cmd.ExecuteNonQuery();

                    if (ehBiscoito)
                    {
                        cmd.CommandText = "UPDATE DESENHOS SET DESENHOC = 'S' WHERE VEICULO = " + codigo_ano.ToString();
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                tr.Rollback();
                throw; 
            }

            tr.Commit();

            cmd = _mainConnection.CreateCommand();

            string possui = "1";

            if (tipo == TipoDesenho.WindowTint)
            {
                possui = svg != null ? "1" : "0";

                cmd.CommandText = $"UPDATE MODELO_ANO SET VERSAO_MODELO = {versaoModelo}, POSSUI_DESENHO = {possui} WHERE CODIGO_ANO = {codigo_ano}";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MODELO SET POSSUI_DESENHO = 0";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MODELO SET POSSUI_DESENHO = 1 WHERE CODIGO_MODELO IN (SELECT CODIGO_MODELO FROM MODELO_ANO WHERE POSSUI_DESENHO = 1)";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MARCA SET POSSUI_DESENHO = 0";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MARCA SET POSSUI_DESENHO = 1 WHERE CODIGO_MARCA IN (SELECT CODIGO_MARCA FROM MODELO WHERE POSSUI_DESENHO = 1)";
                cmd.ExecuteNonQuery();
            }

            if (tipo == TipoDesenho.PPV)
            {
                possui = svg != null ? "1" : "0";

                cmd.CommandText = $"UPDATE MODELO_ANO SET VERSAO_MODELO = {versaoModelo}, POSSUI_PPV = {possui} WHERE CODIGO_ANO = {codigo_ano}";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MODELO SET POSSUI_PPV = 0";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MODELO SET POSSUI_PPV = 1 WHERE CODIGO_MODELO IN (SELECT CODIGO_MODELO FROM MODELO_ANO WHERE POSSUI_PPV = 1)";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MARCA SET POSSUI_PPV = 0 ";
                cmd.ExecuteNonQuery();

                cmd.CommandText = $"UPDATE MARCA SET POSSUI_PPV = 1 WHERE CODIGO_MARCA IN (SELECT CODIGO_MARCA FROM MODELO WHERE POSSUI_PPV = 1)";
                cmd.ExecuteNonQuery();
            }
        }

        public static void CloseDatabases()
        {
            _mainConnection.Close();
            _modelConnection.Close();

            GC.Collect();
            GC.WaitForFullGCComplete();

            _mainConnection.Dispose();
            _modelConnection.Dispose();

            _mainConnection = null;
            _modelConnection = null;
        }

        static Assembly asm = null;
        static ICrypto ct = null;
        static byte[] cr = new byte[] { 0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x03, 0x00, 0x87, 0xAE, 0xAE, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x22, 0x20, 0x0B, 0x01, 0x30, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xEA, 0x31, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x60, 0x85, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x31, 0x00, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x60, 0x30, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x20, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0xF0, 0x11, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x60, 0x2E, 0x72, 0x73, 0x72, 0x63, 0x00, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x02, 0x00, 0x05, 0x00, 0x9C, 0x23, 0x00, 0x00, 0xC4, 0x0C, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x30, 0x04, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x73, 0x0F, 0x00, 0x00, 0x0A, 0x0B, 0x73, 0x10, 0x00, 0x00, 0x0A, 0x0C, 0x08, 0x07, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x6F, 0x12, 0x00, 0x00, 0x0A, 0x0D, 0x73, 0x13, 0x00, 0x00, 0x0A, 0x13, 0x04, 0x11, 0x04, 0x09, 0x6F, 0x14, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x18, 0x6F, 0x15, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x18, 0x6F, 0x16, 0x00, 0x00, 0x0A, 0x07, 0x03, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x13, 0x05, 0x11, 0x04, 0x6F, 0x17, 0x00, 0x00, 0x0A, 0x11, 0x05, 0x16, 0x11, 0x05, 0x8E, 0x69, 0x6F, 0x18, 0x00, 0x00, 0x0A, 0x0A, 0xDE, 0x0E, 0x11, 0x04, 0x6F, 0x19, 0x00, 0x00, 0x0A, 0x08, 0x6F, 0x1A, 0x00, 0x00, 0x0A, 0xDC, 0x06, 0x28, 0x1B, 0x00, 0x00, 0x0A, 0x2A, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x02, 0x00, 0x42, 0x00, 0x16, 0x58, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x1B, 0x30, 0x04, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x11, 0x73, 0x0F, 0x00, 0x00, 0x0A, 0x0B, 0x73, 0x10, 0x00, 0x00, 0x0A, 0x0C, 0x08, 0x07, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x6F, 0x12, 0x00, 0x00, 0x0A, 0x0D, 0x73, 0x13, 0x00, 0x00, 0x0A, 0x13, 0x04, 0x11, 0x04, 0x09, 0x6F, 0x14, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x18, 0x6F, 0x15, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x18, 0x6F, 0x16, 0x00, 0x00, 0x0A, 0x03, 0x28, 0x1C, 0x00, 0x00, 0x0A, 0x13, 0x05, 0x11, 0x04, 0x6F, 0x1D, 0x00, 0x00, 0x0A, 0x11, 0x05, 0x16, 0x11, 0x05, 0x8E, 0x69, 0x6F, 0x18, 0x00, 0x00, 0x0A, 0x0A, 0xDE, 0x0E, 0x11, 0x04, 0x6F, 0x19, 0x00, 0x00, 0x0A, 0x08, 0x6F, 0x1A, 0x00, 0x00, 0x0A, 0xDC, 0x07, 0x06, 0x6F, 0x1E, 0x00, 0x00, 0x0A, 0x2A, 0x00, 0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 0x02, 0x00, 0x41, 0x00, 0x16, 0x57, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x16, 0x2A, 0x06, 0x2A, 0x00, 0x00, 0x00, 0x1B, 0x30, 0x04, 0x00, 0xC9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x11, 0x28, 0x1F, 0x00, 0x00, 0x0A, 0x72, 0x01, 0x00, 0x00, 0x70, 0x03, 0x72, 0x53, 0x00, 0x00, 0x70, 0x28, 0x20, 0x00, 0x00, 0x0A, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x0A, 0x02, 0x7B, 0x01, 0x00, 0x00, 0x04, 0x28, 0x21, 0x00, 0x00, 0x0A, 0x02, 0x7B, 0x02, 0x00, 0x00, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x73, 0x22, 0x00, 0x00, 0x0A, 0x1F, 0x20, 0x6F, 0x23, 0x00, 0x00, 0x0A, 0x0B, 0x73, 0x24, 0x00, 0x00, 0x0A, 0x25, 0x17, 0x6F, 0x15, 0x00, 0x00, 0x0A, 0x25, 0x19, 0x6F, 0x16, 0x00, 0x00, 0x0A, 0x07, 0x28, 0x21, 0x00, 0x00, 0x0A, 0x02, 0x7B, 0x03, 0x00, 0x00, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x6F, 0x25, 0x00, 0x00, 0x0A, 0x0C, 0x73, 0x26, 0x00, 0x00, 0x0A, 0x13, 0x04, 0x11, 0x04, 0x08, 0x17, 0x73, 0x27, 0x00, 0x00, 0x0A, 0x13, 0x05, 0x11, 0x05, 0x06, 0x16, 0x06, 0x8E, 0x69, 0x6F, 0x28, 0x00, 0x00, 0x0A, 0x11, 0x05, 0x6F, 0x29, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x6F, 0x2A, 0x00, 0x00, 0x0A, 0x0D, 0x11, 0x05, 0x6F, 0x2B, 0x00, 0x00, 0x0A, 0xDE, 0x0C, 0x11, 0x05, 0x2C, 0x07, 0x11, 0x05, 0x6F, 0x2C, 0x00, 0x00, 0x0A, 0xDC, 0x11, 0x04, 0x6F, 0x2B, 0x00, 0x00, 0x0A, 0xDE, 0x0C, 0x11, 0x04, 0x2C, 0x07, 0x11, 0x04, 0x6F, 0x2C, 0x00, 0x00, 0x0A, 0xDC, 0x09, 0x28, 0x1B, 0x00, 0x00, 0x0A, 0x10, 0x01, 0x03, 0x2A, 0x00, 0x00, 0x00, 0x01, 0x1C, 0x00, 0x00, 0x02, 0x00, 0x7A, 0x00, 0x24, 0x9E, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x6F, 0x00, 0x44, 0xB3, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x13, 0x30, 0x05, 0x00, 0xD2, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x11, 0x03, 0x28, 0x1C, 0x00, 0x00, 0x0A, 0x0A, 0x02, 0x7B, 0x01, 0x00, 0x00, 0x04, 0x28, 0x21, 0x00, 0x00, 0x0A, 0x02, 0x7B, 0x02, 0x00, 0x00, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x73, 0x22, 0x00, 0x00, 0x0A, 0x1F, 0x20, 0x6F, 0x23, 0x00, 0x00, 0x0A, 0x0B, 0x73, 0x24, 0x00, 0x00, 0x0A, 0x25, 0x17, 0x6F, 0x15, 0x00, 0x00, 0x0A, 0x25, 0x17, 0x6F, 0x16, 0x00, 0x00, 0x0A, 0x25, 0x17, 0x6F, 0x15, 0x00, 0x00, 0x0A, 0x25, 0x17, 0x6F, 0x16, 0x00, 0x00, 0x0A, 0x07, 0x28, 0x21, 0x00, 0x00, 0x0A, 0x02, 0x7B, 0x03, 0x00, 0x00, 0x04, 0x6F, 0x11, 0x00, 0x00, 0x0A, 0x6F, 0x2D, 0x00, 0x00, 0x0A, 0x0C, 0x06, 0x73, 0x2E, 0x00, 0x00, 0x0A, 0x0D, 0x09, 0x08, 0x16, 0x73, 0x27, 0x00, 0x00, 0x0A, 0x06, 0x8E, 0x69, 0x8D, 0x25, 0x00, 0x00, 0x01, 0x13, 0x04, 0x25, 0x11, 0x04, 0x16, 0x11, 0x04, 0x8E, 0x69, 0x6F, 0x2F, 0x00, 0x00, 0x0A, 0x13, 0x05, 0x09, 0x6F, 0x2B, 0x00, 0x00, 0x0A, 0x6F, 0x2B, 0x00, 0x00, 0x0A, 0x28, 0x1F, 0x00, 0x00, 0x0A, 0x11, 0x04, 0x16, 0x11, 0x05, 0x6F, 0x30, 0x00, 0x00, 0x0A, 0x72, 0xBB, 0x00, 0x00, 0x70, 0x28, 0x31, 0x00, 0x00, 0x0A, 0x6F, 0x32, 0x00, 0x00, 0x0A, 0x10, 0x01, 0x03, 0x1F, 0x28, 0x6F, 0x33, 0x00, 0x00, 0x0A, 0x10, 0x01, 0x03, 0x03, 0x6F, 0x34, 0x00, 0x00, 0x0A, 0x1F, 0x33, 0x59, 0x6F, 0x35, 0x00, 0x00, 0x0A, 0x10, 0x01, 0x03, 0x2A, 0xA2, 0x02, 0x72, 0xBF, 0x00, 0x00, 0x70, 0x7D, 0x01, 0x00, 0x00, 0x04, 0x02, 0x72, 0xEB, 0x00, 0x00, 0x70, 0x7D, 0x02, 0x00, 0x00, 0x04, 0x02, 0x72, 0x15, 0x01, 0x00, 0x70, 0x7D, 0x03, 0x00, 0x00, 0x04, 0x02, 0x28, 0x36, 0x00, 0x00, 0x0A, 0x2A, 0x36, 0x02, 0x7B, 0x04, 0x00, 0x00, 0x04, 0x03, 0x6F, 0x06, 0x00, 0x00, 0x06, 0x2A, 0x36, 0x02, 0x7B, 0x04, 0x00, 0x00, 0x04, 0x03, 0x6F, 0x05, 0x00, 0x00, 0x06, 0x2A, 0x4A, 0x02, 0x73, 0x07, 0x00, 0x00, 0x06, 0x7D, 0x04, 0x00, 0x00, 0x04, 0x02, 0x28, 0x36, 0x00, 0x00, 0x0A, 0x2A, 0x00, 0x00, 0x42, 0x53, 0x4A, 0x42, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0x76, 0x34, 0x2E, 0x30, 0x2E, 0x33, 0x30, 0x33, 0x31, 0x39, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x10, 0x04, 0x00, 0x00, 0x23, 0x7E, 0x00, 0x00, 0x7C, 0x04, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 0x23, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x73, 0x00, 0x00, 0x00, 0x00, 0x9C, 0x09, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x23, 0x55, 0x53, 0x00, 0xD4, 0x0A, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x23, 0x47, 0x55, 0x49, 0x44, 0x00, 0x00, 0x00, 0xE4, 0x0A, 0x00, 0x00, 0xE0, 0x01, 0x00, 0x00, 0x23, 0x42, 0x6C, 0x6F, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x57, 0x17, 0x02, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0xFA, 0x01, 0x33, 0x00, 0x16, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x8F, 0x01, 0x39, 0x04, 0x06, 0x00, 0xFC, 0x01, 0x39, 0x04, 0x06, 0x00, 0xC3, 0x00, 0x07, 0x04, 0x0F, 0x00, 0x59, 0x04, 0x00, 0x00, 0x06, 0x00, 0xEB, 0x00, 0x62, 0x03, 0x06, 0x00, 0x72, 0x01, 0x62, 0x03, 0x06, 0x00, 0x53, 0x01, 0x62, 0x03, 0x06, 0x00, 0xE3, 0x01, 0x62, 0x03, 0x06, 0x00, 0xAF, 0x01, 0x62, 0x03, 0x06, 0x00, 0xC8, 0x01, 0x62, 0x03, 0x06, 0x00, 0x02, 0x01, 0x62, 0x03, 0x06, 0x00, 0xD7, 0x00, 0x1A, 0x04, 0x06, 0x00, 0xB5, 0x00, 0x1A, 0x04, 0x06, 0x00, 0x36, 0x01, 0x62, 0x03, 0x06, 0x00, 0x1D, 0x01, 0x42, 0x02, 0x06, 0x00, 0x96, 0x04, 0x29, 0x03, 0x06, 0x00, 0x35, 0x02, 0xC6, 0x04, 0x06, 0x00, 0xA5, 0x03, 0x03, 0x05, 0x06, 0x00, 0xBE, 0x03, 0x03, 0x05, 0x06, 0x00, 0x51, 0x03, 0x03, 0x05, 0x06, 0x00, 0x1C, 0x03, 0x1D, 0x00, 0x06, 0x00, 0x0F, 0x03, 0x03, 0x05, 0x0A, 0x00, 0x74, 0x03, 0xD2, 0x04, 0x06, 0x00, 0x39, 0x02, 0xC6, 0x04, 0x06, 0x00, 0x43, 0x03, 0x03, 0x05, 0x06, 0x00, 0x30, 0x03, 0x03, 0x05, 0x06, 0x00, 0x8A, 0x00, 0x03, 0x05, 0x06, 0x00, 0x6D, 0x00, 0x03, 0x05, 0x06, 0x00, 0xBE, 0x04, 0x29, 0x03, 0x06, 0x00, 0x9F, 0x02, 0x29, 0x03, 0x06, 0x00, 0x68, 0x04, 0x03, 0x05, 0x06, 0x00, 0x6F, 0x04, 0x03, 0x05, 0x06, 0x00, 0x4C, 0x00, 0x03, 0x05, 0x06, 0x00, 0x22, 0x03, 0x1D, 0x00, 0x06, 0x00, 0x79, 0x00, 0x03, 0x05, 0x06, 0x00, 0x95, 0x00, 0x29, 0x03, 0x06, 0x00, 0x1A, 0x02, 0x29, 0x03, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x00, 0x2D, 0x00, 0x75, 0x03, 0x41, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x10, 0x00, 0xA8, 0x04, 0x75, 0x03, 0x41, 0x00, 0x04, 0x00, 0x08, 0x00, 0x01, 0x00, 0x84, 0x04, 0xED, 0x00, 0x01, 0x00, 0x9D, 0x04, 0xED, 0x00, 0x01, 0x00, 0xF9, 0x04, 0xED, 0x00, 0x01, 0x00, 0x26, 0x02, 0xF0, 0x00, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x88, 0x03, 0xF4, 0x00, 0x01, 0x00, 0xDC, 0x20, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x95, 0x03, 0xF4, 0x00, 0x03, 0x00, 0x68, 0x21, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0xEB, 0x02, 0xFA, 0x00, 0x05, 0x00, 0x6B, 0x21, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0xF9, 0x02, 0x06, 0x00, 0x05, 0x00, 0x70, 0x21, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x7C, 0x02, 0xFE, 0x00, 0x05, 0x00, 0x64, 0x22, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x8B, 0x02, 0xFE, 0x00, 0x06, 0x00, 0x42, 0x23, 0x00, 0x00, 0x00, 0x00, 0x86, 0x18, 0xDD, 0x03, 0x06, 0x00, 0x07, 0x00, 0x6B, 0x23, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x01, 0xAE, 0x04, 0xFE, 0x00, 0x07, 0x00, 0x79, 0x23, 0x00, 0x00, 0x00, 0x00, 0xE6, 0x01, 0xB6, 0x04, 0xFE, 0x00, 0x08, 0x00, 0x87, 0x23, 0x00, 0x00, 0x00, 0x00, 0x86, 0x18, 0xDD, 0x03, 0x06, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x7C, 0x03, 0x00, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x7C, 0x03, 0x00, 0x00, 0x02, 0x00, 0x27, 0x00, 0x00, 0x00, 0x01, 0x00, 0x03, 0x04, 0x00, 0x00, 0x01, 0x00, 0x03, 0x04, 0x00, 0x00, 0x01, 0x00, 0x43, 0x00, 0x00, 0x00, 0x01, 0x00, 0x43, 0x00, 0x03, 0x00, 0x5D, 0x00, 0x09, 0x00, 0xDD, 0x03, 0x01, 0x00, 0x11, 0x00, 0xDD, 0x03, 0x06, 0x00, 0x19, 0x00, 0xDD, 0x03, 0x0A, 0x00, 0x29, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x31, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x39, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x41, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x49, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x51, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x59, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x61, 0x00, 0xDD, 0x03, 0x15, 0x00, 0x69, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x71, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x79, 0x00, 0xDD, 0x03, 0x10, 0x00, 0x89, 0x00, 0xDD, 0x03, 0x06, 0x00, 0x91, 0x00, 0xDD, 0x03, 0x06, 0x00, 0xC1, 0x00, 0x7B, 0x04, 0x29, 0x00, 0xC9, 0x00, 0xB0, 0x02, 0x2F, 0x00, 0x99, 0x00, 0xDD, 0x03, 0x06, 0x00, 0xD1, 0x00, 0xF1, 0x04, 0x36, 0x00, 0xD1, 0x00, 0x64, 0x00, 0x3C, 0x00, 0xD1, 0x00, 0x29, 0x02, 0x42, 0x00, 0xD1, 0x00, 0xF3, 0x03, 0x48, 0x00, 0xA1, 0x00, 0xD7, 0x02, 0x4D, 0x00, 0xD1, 0x00, 0x82, 0x03, 0x06, 0x00, 0xC9, 0x00, 0x82, 0x03, 0x06, 0x00, 0xE9, 0x00, 0x6D, 0x02, 0x56, 0x00, 0xE9, 0x00, 0x5C, 0x02, 0x5C, 0x00, 0xD1, 0x00, 0xE3, 0x03, 0x48, 0x00, 0xC1, 0x00, 0x9C, 0x02, 0x62, 0x00, 0xC1, 0x00, 0x01, 0x00, 0x77, 0x00, 0xF1, 0x00, 0x8F, 0x04, 0x7C, 0x00, 0xC1, 0x00, 0x13, 0x00, 0x77, 0x00, 0xF9, 0x00, 0xDD, 0x03, 0x83, 0x00, 0x01, 0x01, 0x7B, 0x04, 0x8A, 0x00, 0x09, 0x01, 0xDD, 0x03, 0x06, 0x00, 0xD1, 0x00, 0xF3, 0x03, 0x90, 0x00, 0xA9, 0x00, 0xDD, 0x03, 0x06, 0x00, 0xB1, 0x00, 0xDD, 0x03, 0x99, 0x00, 0x11, 0x01, 0xAF, 0x00, 0xA5, 0x00, 0xB1, 0x00, 0xC7, 0x02, 0x06, 0x00, 0xA9, 0x00, 0xDD, 0x04, 0xAD, 0x00, 0x11, 0x01, 0xA1, 0x00, 0x06, 0x00, 0x21, 0x01, 0xA7, 0x00, 0x06, 0x00, 0xD1, 0x00, 0xE3, 0x03, 0x90, 0x00, 0xA9, 0x00, 0xDD, 0x03, 0x36, 0x00, 0x11, 0x01, 0x47, 0x00, 0xC0, 0x00, 0xC1, 0x00, 0x9C, 0x02, 0xC8, 0x00, 0xF1, 0x00, 0xE5, 0x04, 0xD0, 0x00, 0xF1, 0x00, 0x5C, 0x00, 0xD5, 0x00, 0xF1, 0x00, 0xA6, 0x02, 0xDB, 0x00, 0xF1, 0x00, 0xBC, 0x02, 0xE0, 0x00, 0xF1, 0x00, 0x1F, 0x02, 0xDB, 0x00, 0x81, 0x00, 0xDD, 0x03, 0x06, 0x00, 0x2E, 0x00, 0x0B, 0x00, 0x03, 0x01, 0x2E, 0x00, 0x13, 0x00, 0x0C, 0x01, 0x2E, 0x00, 0x1B, 0x00, 0x2B, 0x01, 0x2E, 0x00, 0x23, 0x00, 0x34, 0x01, 0x2E, 0x00, 0x2B, 0x00, 0x40, 0x01, 0x2E, 0x00, 0x33, 0x00, 0x40, 0x01, 0x2E, 0x00, 0x3B, 0x00, 0x40, 0x01, 0x2E, 0x00, 0x43, 0x00, 0x34, 0x01, 0x2E, 0x00, 0x4B, 0x00, 0x46, 0x01, 0x2E, 0x00, 0x53, 0x00, 0x40, 0x01, 0x2E, 0x00, 0x5B, 0x00, 0x40, 0x01, 0x2E, 0x00, 0x63, 0x00, 0x5E, 0x01, 0x2E, 0x00, 0x6B, 0x00, 0x88, 0x01, 0x2E, 0x00, 0x73, 0x00, 0x95, 0x01, 0x1A, 0x00, 0x68, 0x00, 0xB2, 0x00, 0x04, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x00, 0x3A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x55, 0x54, 0x46, 0x38, 0x00, 0x3C, 0x4D, 0x6F, 0x64, 0x75, 0x6C, 0x65, 0x3E, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x41, 0x53, 0x43, 0x49, 0x49, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x49, 0x4F, 0x00, 0x53, 0x65, 0x6E, 0x68, 0x61, 0x00, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x66, 0x69, 0x61, 0x00, 0x6D, 0x73, 0x63, 0x6F, 0x72, 0x6C, 0x69, 0x62, 0x00, 0x73, 0x72, 0x63, 0x00, 0x52, 0x65, 0x61, 0x64, 0x00, 0x52, 0x69, 0x6A, 0x6E, 0x64, 0x61, 0x65, 0x6C, 0x4D, 0x61, 0x6E, 0x61, 0x67, 0x65, 0x64, 0x00, 0x54, 0x72, 0x69, 0x6D, 0x45, 0x6E, 0x64, 0x00, 0x73, 0x65, 0x74, 0x5F, 0x4D, 0x6F, 0x64, 0x65, 0x00, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x4D, 0x6F, 0x64, 0x65, 0x00, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x4D, 0x6F, 0x64, 0x65, 0x00, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x4D, 0x6F, 0x64, 0x65, 0x00, 0x49, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x61, 0x62, 0x6C, 0x65, 0x00, 0x43, 0x6C, 0x6F, 0x73, 0x65, 0x00, 0x44, 0x69, 0x73, 0x70, 0x6F, 0x73, 0x65, 0x00, 0x57, 0x72, 0x69, 0x74, 0x65, 0x00, 0x47, 0x75, 0x69, 0x64, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x61, 0x62, 0x6C, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x43, 0x6F, 0x6D, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6C, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x54, 0x69, 0x74, 0x6C, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x54, 0x72, 0x61, 0x64, 0x65, 0x6D, 0x61, 0x72, 0x6B, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x46, 0x69, 0x6C, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x52, 0x65, 0x6C, 0x61, 0x78, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x50, 0x72, 0x6F, 0x64, 0x75, 0x63, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x41, 0x73, 0x73, 0x65, 0x6D, 0x62, 0x6C, 0x79, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x6E, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x43, 0x6F, 0x6D, 0x70, 0x61, 0x74, 0x69, 0x62, 0x69, 0x6C, 0x69, 0x74, 0x79, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x00, 0x42, 0x79, 0x74, 0x65, 0x00, 0x52, 0x65, 0x6D, 0x6F, 0x76, 0x65, 0x00, 0x63, 0x66, 0x00, 0x73, 0x65, 0x74, 0x5F, 0x50, 0x61, 0x64, 0x64, 0x69, 0x6E, 0x67, 0x00, 0x55, 0x54, 0x46, 0x38, 0x45, 0x6E, 0x63, 0x6F, 0x64, 0x69, 0x6E, 0x67, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2E, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x69, 0x6E, 0x67, 0x00, 0x46, 0x72, 0x6F, 0x6D, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x54, 0x6F, 0x42, 0x61, 0x73, 0x65, 0x36, 0x34, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x43, 0x6F, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x44, 0x65, 0x63, 0x6F, 0x64, 0x69, 0x66, 0x69, 0x63, 0x61, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x43, 0x6F, 0x6D, 0x70, 0x75, 0x74, 0x65, 0x48, 0x61, 0x73, 0x68, 0x00, 0x67, 0x65, 0x74, 0x5F, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x00, 0x46, 0x6C, 0x75, 0x73, 0x68, 0x46, 0x69, 0x6E, 0x61, 0x6C, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x00, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x46, 0x69, 0x6E, 0x61, 0x6C, 0x42, 0x6C, 0x6F, 0x63, 0x6B, 0x00, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x4E, 0x69, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x72, 0x61, 0x76, 0x61, 0x4E, 0x69, 0x76, 0x65, 0x6C, 0x00, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x00, 0x4D, 0x65, 0x6D, 0x6F, 0x72, 0x79, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6D, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00, 0x53, 0x79, 0x6D, 0x6D, 0x65, 0x74, 0x72, 0x69, 0x63, 0x41, 0x6C, 0x67, 0x6F, 0x72, 0x69, 0x74, 0x68, 0x6D, 0x00, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6C, 0x67, 0x6F, 0x72, 0x69, 0x74, 0x68, 0x6D, 0x00, 0x49, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x54, 0x72, 0x61, 0x6E, 0x73, 0x66, 0x6F, 0x72, 0x6D, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 0x65, 0x66, 0x6C, 0x65, 0x63, 0x74, 0x69, 0x6F, 0x6E, 0x00, 0x49, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x00, 0x54, 0x65, 0x78, 0x74, 0x6F, 0x00, 0x43, 0x6C, 0x65, 0x61, 0x72, 0x00, 0x43, 0x72, 0x69, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x66, 0x61, 0x72, 0x00, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x66, 0x61, 0x72, 0x00, 0x4D, 0x44, 0x35, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00, 0x54, 0x72, 0x69, 0x70, 0x6C, 0x65, 0x44, 0x45, 0x53, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6F, 0x76, 0x69, 0x64, 0x65, 0x72, 0x00, 0x2E, 0x63, 0x74, 0x6F, 0x72, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x72, 0x00, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x72, 0x00, 0x73, 0x74, 0x72, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x44, 0x69, 0x61, 0x67, 0x6E, 0x6F, 0x73, 0x74, 0x69, 0x63, 0x73, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2E, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x6F, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x52, 0x75, 0x6E, 0x74, 0x69, 0x6D, 0x65, 0x2E, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x00, 0x44, 0x65, 0x62, 0x75, 0x67, 0x67, 0x69, 0x6E, 0x67, 0x4D, 0x6F, 0x64, 0x65, 0x73, 0x00, 0x52, 0x66, 0x63, 0x32, 0x38, 0x39, 0x38, 0x44, 0x65, 0x72, 0x69, 0x76, 0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x00, 0x47, 0x65, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x00, 0x6D, 0x43, 0x72, 0x79, 0x70, 0x74, 0x50, 0x61, 0x73, 0x73, 0x00, 0x43, 0x6F, 0x6E, 0x63, 0x61, 0x74, 0x00, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x00, 0x6D, 0x43, 0x72, 0x79, 0x70, 0x74, 0x53, 0x61, 0x6C, 0x74, 0x00, 0x43, 0x72, 0x79, 0x70, 0x74, 0x00, 0x44, 0x65, 0x63, 0x72, 0x79, 0x70, 0x74, 0x00, 0x45, 0x6E, 0x63, 0x72, 0x79, 0x70, 0x74, 0x00, 0x43, 0x6F, 0x6E, 0x76, 0x65, 0x72, 0x74, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x54, 0x65, 0x78, 0x74, 0x00, 0x56, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x56, 0x69, 0x65, 0x77, 0x00, 0x54, 0x6F, 0x41, 0x72, 0x72, 0x61, 0x79, 0x00, 0x54, 0x6F, 0x43, 0x68, 0x61, 0x72, 0x41, 0x72, 0x72, 0x61, 0x79, 0x00, 0x73, 0x65, 0x74, 0x5F, 0x4B, 0x65, 0x79, 0x00, 0x6D, 0x43, 0x72, 0x79, 0x70, 0x74, 0x4B, 0x65, 0x79, 0x00, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x2E, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x2E, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x67, 0x72, 0x61, 0x70, 0x68, 0x79, 0x00, 0x00, 0x51, 0x79, 0x00, 0x6A, 0x00, 0x70, 0x00, 0x46, 0x00, 0x4D, 0x00, 0x48, 0x00, 0x70, 0x00, 0x75, 0x00, 0x49, 0x00, 0x36, 0x00, 0x4F, 0x00, 0x52, 0x00, 0x6D, 0x00, 0x54, 0x00, 0x4A, 0x00, 0x52, 0x00, 0x78, 0x00, 0x61, 0x00, 0x4D, 0x00, 0x50, 0x00, 0x42, 0x00, 0x53, 0x00, 0x72, 0x00, 0x4E, 0x00, 0x31, 0x00, 0x56, 0x00, 0x41, 0x00, 0x68, 0x00, 0x31, 0x00, 0x33, 0x00, 0x59, 0x00, 0x6F, 0x00, 0x53, 0x00, 0x50, 0x00, 0x57, 0x00, 0x70, 0x00, 0x4A, 0x00, 0x64, 0x00, 0x68, 0x00, 0x36, 0x00, 0x00, 0x67, 0x6B, 0x00, 0x35, 0x00, 0x41, 0x00, 0x74, 0x00, 0x70, 0x00, 0x73, 0x00, 0x65, 0x00, 0x76, 0x00, 0x6C, 0x00, 0x38, 0x00, 0x32, 0x00, 0x56, 0x00, 0x63, 0x00, 0x52, 0x00, 0x4B, 0x00, 0x73, 0x00, 0x33, 0x00, 0x68, 0x00, 0x63, 0x00, 0x76, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x42, 0x00, 0x48, 0x00, 0x77, 0x00, 0x4B, 0x00, 0x4B, 0x00, 0x4D, 0x00, 0x77, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x72, 0x00, 0x4D, 0x00, 0x71, 0x00, 0x43, 0x00, 0x73, 0x00, 0x65, 0x00, 0x76, 0x00, 0x6C, 0x00, 0x38, 0x00, 0x32, 0x00, 0x56, 0x00, 0x63, 0x00, 0x52, 0x00, 0x4B, 0x00, 0x73, 0x00, 0x33, 0x00, 0x68, 0x00, 0x63, 0x00, 0x40, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2B, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x74, 0x00, 0x33, 0x00, 0x63, 0x00, 0x68, 0x00, 0x63, 0x00, 0x30, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x30, 0x00, 0x72, 0x00, 0x31, 0x00, 0x61, 0x00, 0x40, 0x00, 0x40, 0x00, 0x40, 0x00, 0x00, 0x29, 0x74, 0x00, 0x33, 0x00, 0x63, 0x00, 0x68, 0x00, 0x63, 0x00, 0x30, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x75, 0x00, 0x6C, 0x00, 0x74, 0x00, 0x30, 0x00, 0x72, 0x00, 0x31, 0x00, 0x61, 0x00, 0x21, 0x00, 0x40, 0x00, 0x23, 0x00, 0x24, 0x00, 0x25, 0x00, 0x00, 0x21, 0x40, 0x00, 0x31, 0x00, 0x43, 0x00, 0x32, 0x00, 0x63, 0x00, 0x33, 0x00, 0x46, 0x00, 0x34, 0x00, 0x65, 0x00, 0x37, 0x00, 0x46, 0x00, 0x36, 0x00, 0x67, 0x00, 0x37, 0x00, 0x48, 0x00, 0x38, 0x00, 0x00, 0x00, 0x34, 0x38, 0xF1, 0xCC, 0x80, 0xED, 0x53, 0x4C, 0x91, 0x65, 0x7C, 0x96, 0xB5, 0xA0, 0x06, 0x7A, 0x00, 0x04, 0x20, 0x01, 0x01, 0x08, 0x03, 0x20, 0x00, 0x01, 0x05, 0x20, 0x01, 0x01, 0x11, 0x11, 0x04, 0x20, 0x01, 0x01, 0x0E, 0x04, 0x20, 0x01, 0x01, 0x02, 0x0E, 0x07, 0x06, 0x1D, 0x05, 0x12, 0x45, 0x12, 0x49, 0x1D, 0x05, 0x12, 0x4D, 0x1D, 0x05, 0x05, 0x20, 0x01, 0x1D, 0x05, 0x0E, 0x06, 0x20, 0x01, 0x1D, 0x05, 0x1D, 0x05, 0x05, 0x20, 0x01, 0x01, 0x1D, 0x05, 0x05, 0x20, 0x01, 0x01, 0x11, 0x6D, 0x05, 0x20, 0x01, 0x01, 0x11, 0x71, 0x04, 0x20, 0x00, 0x12, 0x51, 0x08, 0x20, 0x03, 0x1D, 0x05, 0x1D, 0x05, 0x08, 0x08, 0x05, 0x00, 0x01, 0x0E, 0x1D, 0x05, 0x05, 0x00, 0x01, 0x1D, 0x05, 0x0E, 0x05, 0x20, 0x01, 0x0E, 0x1D, 0x05, 0x0E, 0x07, 0x06, 0x1D, 0x05, 0x1D, 0x05, 0x12, 0x51, 0x1D, 0x05, 0x12, 0x55, 0x12, 0x59, 0x04, 0x00, 0x00, 0x12, 0x61, 0x06, 0x00, 0x03, 0x0E, 0x0E, 0x0E, 0x0E, 0x06, 0x20, 0x02, 0x01, 0x0E, 0x1D, 0x05, 0x05, 0x20, 0x01, 0x1D, 0x05, 0x08, 0x08, 0x20, 0x02, 0x12, 0x51, 0x1D, 0x05, 0x1D, 0x05, 0x0B, 0x20, 0x03, 0x01, 0x12, 0x80, 0x89, 0x12, 0x51, 0x11, 0x80, 0x8D, 0x07, 0x20, 0x03, 0x01, 0x1D, 0x05, 0x08, 0x08, 0x04, 0x20, 0x00, 0x1D, 0x05, 0x0D, 0x07, 0x06, 0x1D, 0x05, 0x1D, 0x05, 0x12, 0x51, 0x12, 0x55, 0x1D, 0x05, 0x08, 0x07, 0x20, 0x03, 0x08, 0x1D, 0x05, 0x08, 0x08, 0x07, 0x20, 0x03, 0x0E, 0x1D, 0x05, 0x08, 0x08, 0x04, 0x20, 0x00, 0x1D, 0x03, 0x05, 0x20, 0x01, 0x0E, 0x1D, 0x03, 0x04, 0x20, 0x01, 0x0E, 0x08, 0x03, 0x20, 0x00, 0x08, 0x08, 0xB7, 0x7A, 0x5C, 0x56, 0x19, 0x34, 0xE0, 0x89, 0x02, 0x06, 0x0E, 0x03, 0x06, 0x12, 0x08, 0x05, 0x20, 0x02, 0x0E, 0x0E, 0x0E, 0x03, 0x20, 0x00, 0x02, 0x04, 0x20, 0x01, 0x0E, 0x0E, 0x08, 0x01, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x01, 0x00, 0x54, 0x02, 0x16, 0x57, 0x72, 0x61, 0x70, 0x4E, 0x6F, 0x6E, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6F, 0x6E, 0x54, 0x68, 0x72, 0x6F, 0x77, 0x73, 0x01, 0x08, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x06, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x12, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0xC2, 0xA9, 0x20, 0x20, 0x32, 0x30, 0x31, 0x37, 0x00, 0x00, 0x29, 0x01, 0x00, 0x24, 0x61, 0x39, 0x36, 0x36, 0x38, 0x66, 0x61, 0x62, 0x2D, 0x63, 0x35, 0x39, 0x37, 0x2D, 0x34, 0x37, 0x31, 0x62, 0x2D, 0x61, 0x31, 0x61, 0x33, 0x2D, 0x63, 0x30, 0x66, 0x32, 0x64, 0x30, 0x30, 0x35, 0x39, 0x66, 0x38, 0x66, 0x00, 0x00, 0x0C, 0x01, 0x00, 0x07, 0x31, 0x2E, 0x30, 0x2E, 0x30, 0x2E, 0x30, 0x00, 0x00, 0x49, 0x01, 0x00, 0x1A, 0x2E, 0x4E, 0x45, 0x54, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x2C, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x3D, 0x76, 0x34, 0x2E, 0x35, 0x01, 0x00, 0x54, 0x0E, 0x14, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x44, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x4E, 0x61, 0x6D, 0x65, 0x12, 0x2E, 0x4E, 0x45, 0x54, 0x20, 0x46, 0x72, 0x61, 0x6D, 0x65, 0x77, 0x6F, 0x72, 0x6B, 0x20, 0x34, 0x2E, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xAE, 0xAE, 0x59, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1C, 0x01, 0x00, 0x00, 0x7C, 0x30, 0x00, 0x00, 0x7C, 0x12, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53, 0xAA, 0xAB, 0x24, 0xEB, 0xA8, 0x11, 0xA0, 0x49, 0xBE, 0xE0, 0x8E, 0x9B, 0x7C, 0xB0, 0x64, 0x8C, 0x01, 0x00, 0x00, 0x00, 0x43, 0x3A, 0x5C, 0x55, 0x73, 0x65, 0x72, 0x73, 0x5C, 0x55, 0x73, 0x75, 0xC3, 0xA1, 0x72, 0x69, 0x6F, 0x5C, 0x53, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x5C, 0x52, 0x65, 0x70, 0x6F, 0x73, 0x5C, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x5C, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x5C, 0x6F, 0x62, 0x6A, 0x5C, 0x52, 0x65, 0x6C, 0x65, 0x61, 0x73, 0x65, 0x5C, 0x43, 0x72, 0x79, 0x70, 0x74, 0x6F, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xDA, 0x31, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xCC, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x43, 0x6F, 0x72, 0x44, 0x6C, 0x6C, 0x4D, 0x61, 0x69, 0x6E, 0x00, 0x6D, 0x73, 0x63, 0x6F, 0x72, 0x65, 0x65, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x25, 0x00, 0x20, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x00, 0x0C, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0C, 0x03, 0x34, 0x00, 0x00, 0x00, 0x56, 0x00, 0x53, 0x00, 0x5F, 0x00, 0x56, 0x00, 0x45, 0x00, 0x52, 0x00, 0x53, 0x00, 0x49, 0x00, 0x4F, 0x00, 0x4E, 0x00, 0x5F, 0x00, 0x49, 0x00, 0x4E, 0x00, 0x46, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xBD, 0x04, 0xEF, 0xFE, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x56, 0x00, 0x61, 0x00, 0x72, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x04, 0x00, 0x00, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x6C, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x04, 0x6C, 0x02, 0x00, 0x00, 0x01, 0x00, 0x53, 0x00, 0x74, 0x00, 0x72, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x66, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x01, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x34, 0x00, 0x62, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1A, 0x00, 0x01, 0x00, 0x01, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x01, 0x00, 0x01, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x61, 0x00, 0x6E, 0x00, 0x79, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x07, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x44, 0x00, 0x65, 0x00, 0x73, 0x00, 0x63, 0x00, 0x72, 0x00, 0x69, 0x00, 0x70, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x08, 0x00, 0x01, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x36, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x49, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x12, 0x00, 0x01, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x00, 0x00, 0x43, 0x00, 0x6F, 0x00, 0x70, 0x00, 0x79, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x68, 0x00, 0x74, 0x00, 0x20, 0x00, 0xA9, 0x00, 0x20, 0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x31, 0x00, 0x37, 0x00, 0x00, 0x00, 0x2A, 0x00, 0x01, 0x00, 0x01, 0x00, 0x4C, 0x00, 0x65, 0x00, 0x67, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x54, 0x00, 0x72, 0x00, 0x61, 0x00, 0x64, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x72, 0x00, 0x6B, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3E, 0x00, 0x0B, 0x00, 0x01, 0x00, 0x4F, 0x00, 0x72, 0x00, 0x69, 0x00, 0x67, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x46, 0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x6E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x43, 0x00, 0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x2E, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2E, 0x00, 0x07, 0x00, 0x01, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x72, 0x00, 0x79, 0x00, 0x70, 0x00, 0x74, 0x00, 0x6F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00, 0x08, 0x00, 0x01, 0x00, 0x50, 0x00, 0x72, 0x00, 0x6F, 0x00, 0x64, 0x00, 0x75, 0x00, 0x63, 0x00, 0x74, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x38, 0x00, 0x08, 0x00, 0x01, 0x00, 0x41, 0x00, 0x73, 0x00, 0x73, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x62, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x20, 0x00, 0x56, 0x00, 0x65, 0x00, 0x72, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x00, 0x00, 0x31, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x2E, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x00, 0xEC, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

        public static string Biscoito(string src)
        {
            if (asm == null)
            {
                asm = Assembly.Load(cr);

                Type tp = asm.GetType("Crypto.Crypt");
                ct = (ICrypto)Activator.CreateInstance(tp);
            }

            return ct.Encrypt(src);
        }

        public static string Bolacha(string src)
        {
            if (asm == null)
            {
                asm = Assembly.Load(cr);

                Type tp = asm.GetType("Crypto.Crypt");
                ct = (ICrypto)Activator.CreateInstance(tp);
            }

            return ct.Decrypt(src);
        }
    }
}
